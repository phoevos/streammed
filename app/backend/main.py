import logging
import random

import nltk
import spacy
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

app = FastAPI()
log = logging.getLogger("uvicorn")
med7 = spacy.load("en_core_med7_lg")
nltk.download("punkt_tab", raise_on_error=True)

MEDICATION_ANNOTATION = "DRUG"


class TextRequest(BaseModel):
    text: str
    model: str


@app.post("/predict")
async def predict(request: TextRequest):
    """Generate annotations for the given text using the specified model.

    This function currently supports two models for generating annotations:
    - `random`: This model tokenises the input text into words and randomly
        selects a subset of words to annotate as medications.
    - `med7`: This model uses the med7 named entity recognition model to
        identify and annotate drug entities in the text. Only entities labeled
        as `DRUG` by the model are included in the annotations.

    Args:
        request (TextRequest): A request object containing the text to annotate
            and the model to use for annotation.

    Returns:
        dict: A dictionary containing the annotations generated by the model.
            Each annotation includes the start and end positions of the annotated
            text and the label (i.e. `DRUG`).
    """
    log.info(f"Received request: {request.json()}")
    text, model = request.text, request.model

    if model not in {"random", "med7"}:
        raise HTTPException(
            status_code=400,
            detail="Invalid model name. Supported models are 'random' and 'med7'.",
        )

    try:
        if model == "random":
            words = nltk.word_tokenize(text)
            word_positions = []
            current_pos = 0
            log.info(f"Tokenized words: {words}")

            for word in words:
                start = text.find(word, current_pos)
                end = start + len(word)
                word_positions.append((start, end))
                current_pos = end

            num_annotations = random.randint(1, len(words)) if words else 0
            selected_words = sorted(
                random.sample(word_positions, num_annotations), key=lambda x: x[0]
            )
            annotations = [
                {"start": start, "end": end, "label": MEDICATION_ANNOTATION}
                for start, end in selected_words
            ]
        elif model == "med7":
            doc = med7(text)
            annotations = [
                {"start": ent.start_char, "end": ent.end_char, "label": ent.label_}
                for ent in doc.ents
                if ent.label_ == "DRUG"
            ]

    except Exception as e:
        log.error(f"Unexpected error: {e}")
        raise HTTPException(status_code=500, detail="An unexpected error occurred.")

    log.info(f"Generated annotations: {annotations}")
    return {"annotations": annotations}
